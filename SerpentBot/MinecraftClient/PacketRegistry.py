from .DataTypes.VarInt import VarInt
from .DataTypes.String import String
from .DataTypes.Generics import Generics
from .DataTypes.ByteArray import ByteArray
import enum

class PacketRegistry:
    class Direction (enum.Enum):
        CLIENTBOUND = enum.auto
        SERVERBOUND = enum.auto
    class State (enum.Enum):
        HANDSHAKING = 0x00
        STATUS      = 0x01
        LOGIN       = 0x02
        PLAY        = 0x03
    class FieldFlags:
        IS_LENGTH_OF_NEXT = 0b00000001
        IS_REST_OF_PACKET = 0b00000010
    registry = {
        State.HANDSHAKING: {
            Direction.CLIENTBOUND: {},
            Direction.SERVERBOUND: {
                0x00: ( # packet ID
                    "Handshake", # packet name
                    [
                        ("Protocol Version", VarInt), # See protocol version numbers (currently 754 in Minecraft 1.16.5)
                        ("Server Address", String), # Hostname or IP that was used to connect. The Notchian server does not use this information.
                        ("Server Port", Generics.UShort), # Default is 25565. The Notchian server does not use this information.
                        ("Next State", VarInt) # 1 for status, 2 for login. (matches State enum)
                    ] # field specification, list of (field name, type) # field desc
                )
            }
        },
        State.STATUS: {
            Direction.CLIENTBOUND: {
                0x00: (
                    "Response",
                    [("JSON Response", String)] # See Server List Ping#Response
                ),
                0x01: (
                    "Pong",
                    [("Payload", Generics.Long)] # Should be the same as sent by the client.
                )
            },
            Direction.SERVERBOUND: {
                0x00: (
                    "Request",
                    []
                ),
                0x01: (
                    "Ping",
                    [("Payload", Generics.Long)] # May be any number. Notchian clients use a system-dependent time value which is counted in milliseconds.
                )
            }
        },
        State.LOGIN: {
            Direction.CLIENTBOUND: {
                0x00: (
                    "Disconnect",
                    [("Reason", String)] # (Actually Chat type)
                ),
                0x01: (
                    "Encryption Request",
                    [
                        ("Server ID", String), # Used with the Yggdrasil component of a client joining an online-mode server.
                        ("Public Key Length", VarInt, FieldFlags.IS_LENGTH_OF_NEXT), # Length of Public Key
                        ("Public Key", ByteArray), # The server's public key in bytes
                        ("Verify Token Length", VarInt, FieldFlags.IS_LENGTH_OF_NEXT), # Length of Verify Token. Always 4 for Notchian servers.
                        ("Verify Token", ByteArray) # A sequence of random bytes generated by the server.
                    ]
                ),
                0x02: (
                    "Login Success",
                    [
                        ("UUID", Generics.UUID), # Player UUID
                        ("Username", String) # Player username
                    ]
                ),
                0x03: ( # NOTE: SENT BEFORE LOGIN SUCCESS! All following packets are compressed
                    "Set Compression",
                    [
                        ("Threshold", VarInt) # Maximum size of a packet before it is compressed.
                    ]
                ),
                0x04: ( # ALSO SENT BEFORE LOGIN SUCCESS + REQUIRES RESPONSE!
                    "Login Plugin Request",
                    [
                        ("Message ID", VarInt), # Generated by the server - should be unique to the connection.
                        ("Channel", String), # Name of the plugin channel used to send the data.
                        ("Data", ByteArray, FieldFlags.IS_REST_OF_PACKET) # Any data, depending on the channel.
                    ]
                )
            },
            Direction.SERVERBOUND: {
                0x00: (
                    "Login Start",
                    [
                        ("Name", String) # Player's username.
                    ]
                ),
                0x01: ( # NOTE: All following packets are encrypted
                    "Encryption Response",
                    [
                        ("Shared Secret Length", VarInt, FieldFlags.IS_LENGTH_OF_NEXT), # Length of shared secret.
                        ("Shared Secret", ByteArray), # Shared secret value, encrypted with the server's public key.
                        ("Verify Token Length", VarInt, FieldFlags.IS_LENGTH_OF_NEXT), # Length of verify token.
                        ("Verify Token", ByteArray) # Verify token value, encrypted with the same public key as the shared secret.
                    ]
                ),
                0x02: ( # Required for each Login Plugin Request packet
                    "Login Plugin Response",
                    [
                        ("Message ID", VarInt), # Should match ID from server.
                        ("Successful", Generics.Boolean, FieldFlags.TELLS_IF_NEXT), # true if the client understands the request, false otherwise. When false, no payload follows.
                        ("Data", ByteArray, FieldFlags.IS_REST_OF_PACKET) # Any data, depending on the channel.
                    ]
                )
            }
        }
    }
